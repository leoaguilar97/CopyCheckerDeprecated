
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package cp.html;

import java_cup.runtime.Symbol;
import Reporter.Reporter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\011\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\004\011" +
    "\000\002\004\010\000\002\006\010\000\002\005\012\000" +
    "\002\007\003\000\002\007\003\000\002\010\004\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\004\000\002\011\004\000\002\012\011\000" +
    "\002\012\011\000\002\012\011\000\002\012\011\000\002" +
    "\012\011\000\002\012\011\000\002\013\012\000\002\014" +
    "\003\000\002\014\003\000\002\015\004\000\002\015\003" +
    "\000\002\020\012\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\017\004\000\002\017\003\000\002" +
    "\016\011\000\002\022\004\000\002\022\003\000\002\023" +
    "\011\000\002\024\012\000\002\025\004\000\002\025\003" +
    "\000\002\025\003\000\002\026\005\000\002\026\005\000" +
    "\002\027\005\000\002\027\005\000\002\030\012\000\002" +
    "\033\003\000\002\033\003\000\002\031\004\000\002\031" +
    "\003\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\034\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\004\035\005\001\002\000\004\002\253\001" +
    "\002\000\004\004\006\001\002\000\004\036\007\001\002" +
    "\000\004\035\011\001\002\000\006\035\251\037\ufffe\001" +
    "\002\000\006\005\020\006\017\001\002\000\004\037\014" +
    "\001\002\000\004\037\ufffd\001\002\000\004\004\015\001" +
    "\002\000\004\036\016\001\002\000\004\002\000\001\002" +
    "\000\014\026\040\027\044\030\046\031\043\036\uffc6\001" +
    "\002\000\004\036\021\001\002\000\006\035\022\037\024" +
    "\001\002\000\004\007\032\001\002\000\004\037\027\001" +
    "\002\000\004\005\025\001\002\000\004\036\026\001\002" +
    "\000\006\035\ufffb\037\ufffb\001\002\000\004\005\030\001" +
    "\002\000\004\036\031\001\002\000\006\035\ufffc\037\ufffc" +
    "\001\002\000\004\036\033\001\002\000\004\037\034\001" +
    "\002\000\004\007\035\001\002\000\004\036\036\001\002" +
    "\000\004\037\ufffa\001\002\000\004\036\uffcd\001\002\000" +
    "\004\041\247\001\002\000\004\036\056\001\002\000\014" +
    "\026\uffcb\027\uffcb\030\uffcb\031\uffcb\036\uffcb\001\002\000" +
    "\004\041\054\001\002\000\004\041\052\001\002\000\014" +
    "\026\040\027\044\030\046\031\043\036\uffce\001\002\000" +
    "\004\041\047\001\002\000\004\033\050\001\002\000\014" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\036\uffc8\001\002\000" +
    "\014\026\uffcc\027\uffcc\030\uffcc\031\uffcc\036\uffcc\001\002" +
    "\000\004\032\053\001\002\000\014\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\036\uffc9\001\002\000\004\034\055\001\002" +
    "\000\014\026\uffc7\027\uffc7\030\uffc7\031\uffc7\036\uffc7\001" +
    "\002\000\010\003\066\035\063\037\uffc6\001\002\000\010" +
    "\003\uffef\035\uffef\037\uffef\001\002\000\010\003\ufff2\035" +
    "\ufff2\037\ufff2\001\002\000\010\003\ufff5\035\ufff5\037\ufff5" +
    "\001\002\000\010\003\ufff4\035\ufff4\037\ufff4\001\002\000" +
    "\030\010\113\011\112\012\111\013\110\014\107\015\104" +
    "\016\106\022\105\023\103\024\102\025\101\001\002\000" +
    "\010\003\066\035\063\037\ufff8\001\002\000\004\037\075" +
    "\001\002\000\006\036\073\040\074\001\002\000\010\003" +
    "\ufff0\035\ufff0\037\ufff0\001\002\000\004\037\ufff7\001\002" +
    "\000\010\003\ufff3\035\ufff3\037\ufff3\001\002\000\010\003" +
    "\ufff1\035\ufff1\037\ufff1\001\002\000\010\003\uffee\035\uffee" +
    "\037\uffee\001\002\000\010\003\uffed\035\uffed\037\uffed\001" +
    "\002\000\004\006\076\001\002\000\004\036\077\001\002" +
    "\000\004\037\ufff9\001\002\000\010\003\ufff6\035\ufff6\037" +
    "\ufff6\001\002\000\006\036\245\040\246\001\002\000\006" +
    "\036\243\040\244\001\002\000\014\026\040\027\044\030" +
    "\046\031\043\036\uffc6\001\002\000\014\026\040\027\044" +
    "\030\046\031\043\036\uffc6\001\002\000\014\026\040\027" +
    "\044\030\046\031\043\036\uffc6\001\002\000\014\026\040" +
    "\027\044\030\046\031\043\036\uffc6\001\002\000\014\026" +
    "\040\027\044\030\046\031\043\036\uffc6\001\002\000\014" +
    "\026\040\027\044\030\046\031\043\036\uffc6\001\002\000" +
    "\014\026\040\027\044\030\046\031\043\036\uffc6\001\002" +
    "\000\014\026\040\027\044\030\046\031\043\036\uffc6\001" +
    "\002\000\014\026\040\027\044\030\046\031\043\036\uffc6" +
    "\001\002\000\004\036\115\001\002\000\004\037\116\001" +
    "\002\000\004\010\117\001\002\000\004\036\120\001\002" +
    "\000\010\003\uffec\035\uffec\037\uffec\001\002\000\004\036" +
    "\122\001\002\000\004\037\123\001\002\000\004\011\124" +
    "\001\002\000\004\036\125\001\002\000\010\003\uffeb\035" +
    "\uffeb\037\uffeb\001\002\000\004\036\127\001\002\000\004" +
    "\037\130\001\002\000\004\012\131\001\002\000\004\036" +
    "\132\001\002\000\010\003\uffea\035\uffea\037\uffea\001\002" +
    "\000\004\036\134\001\002\000\004\037\135\001\002\000" +
    "\004\013\136\001\002\000\004\036\137\001\002\000\010" +
    "\003\uffe9\035\uffe9\037\uffe9\001\002\000\004\036\141\001" +
    "\002\000\004\037\142\001\002\000\004\014\143\001\002" +
    "\000\004\036\144\001\002\000\010\003\uffe8\035\uffe8\037" +
    "\uffe8\001\002\000\004\036\146\001\002\000\006\035\151" +
    "\037\uffc6\001\002\000\006\035\uffe2\037\uffe2\001\002\000" +
    "\004\037\uffe4\001\002\000\004\020\160\001\002\000\006" +
    "\035\151\037\uffe5\001\002\000\004\037\154\001\002\000" +
    "\004\016\155\001\002\000\004\036\156\001\002\000\010" +
    "\003\uffe6\035\uffe6\037\uffe6\001\002\000\006\035\uffe3\037" +
    "\uffe3\001\002\000\014\026\040\027\044\030\046\031\043" +
    "\036\uffc6\001\002\000\004\036\162\001\002\000\006\035" +
    "\167\037\uffc6\001\002\000\004\037\212\001\002\000\006" +
    "\035\211\037\uffe0\001\002\000\006\035\206\037\uffdf\001" +
    "\002\000\004\037\uffde\001\002\000\006\017\173\021\172" +
    "\001\002\000\006\035\uffdc\037\uffdc\001\002\000\006\035" +
    "\uffd9\037\uffd9\001\002\000\014\026\040\027\044\030\046" +
    "\031\043\036\uffc6\001\002\000\014\026\040\027\044\030" +
    "\046\031\043\036\uffc6\001\002\000\004\036\175\001\002" +
    "\000\004\037\176\001\002\000\004\017\177\001\002\000" +
    "\004\036\200\001\002\000\006\035\uffdb\037\uffdb\001\002" +
    "\000\004\036\202\001\002\000\004\037\203\001\002\000" +
    "\004\021\204\001\002\000\004\036\205\001\002\000\006" +
    "\035\uffd8\037\uffd8\001\002\000\004\021\172\001\002\000" +
    "\006\035\uffda\037\uffda\001\002\000\006\035\uffdd\037\uffdd" +
    "\001\002\000\004\017\173\001\002\000\004\020\213\001" +
    "\002\000\004\036\214\001\002\000\006\035\uffe1\037\uffe1" +
    "\001\002\000\004\036\216\001\002\000\010\003\066\035" +
    "\063\037\uffc6\001\002\000\004\037\220\001\002\000\004" +
    "\022\221\001\002\000\004\036\222\001\002\000\010\003" +
    "\uffcf\035\uffcf\037\uffcf\001\002\000\004\036\224\001\002" +
    "\000\004\037\225\001\002\000\004\015\226\001\002\000" +
    "\004\036\227\001\002\000\010\003\uffe7\035\uffe7\037\uffe7" +
    "\001\002\000\004\036\231\001\002\000\004\035\232\001" +
    "\002\000\020\010\113\011\112\012\111\013\110\014\107" +
    "\015\104\024\102\001\002\000\006\035\uffd4\037\uffd4\001" +
    "\002\000\006\035\236\037\237\001\002\000\006\035\uffd5" +
    "\037\uffd5\001\002\000\016\010\113\011\112\012\111\013" +
    "\110\014\107\015\104\001\002\000\004\023\241\001\002" +
    "\000\006\035\uffd6\037\uffd6\001\002\000\004\036\242\001" +
    "\002\000\010\003\uffd7\035\uffd7\037\uffd7\001\002\000\010" +
    "\003\uffd2\035\uffd2\037\uffd2\001\002\000\010\003\uffd3\035" +
    "\uffd3\037\uffd3\001\002\000\010\003\uffd0\035\uffd0\037\uffd0" +
    "\001\002\000\010\003\uffd1\035\uffd1\037\uffd1\001\002\000" +
    "\004\032\250\001\002\000\014\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\036\uffca\001\002\000\004\006\017\001\002\000" +
    "\004\037\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\011\004\007" +
    "\005\012\001\001\000\004\005\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\031\044\032" +
    "\041\033\040\034\036\001\001\000\002\001\001\000\004" +
    "\006\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\007\064\010\063\011\060\012\061\013\070" +
    "\024\057\026\071\027\066\030\056\034\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\011\077\012\061\013" +
    "\070\024\057\026\071\027\066\030\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\031\044\032\041\033\227\034\036\001" +
    "\001\000\012\031\044\032\041\033\222\034\036\001\001" +
    "\000\012\031\044\032\041\033\214\034\036\001\001\000" +
    "\012\031\044\032\041\033\144\034\036\001\001\000\012" +
    "\031\044\032\041\033\137\034\036\001\001\000\012\031" +
    "\044\032\041\033\132\034\036\001\001\000\012\031\044" +
    "\032\041\033\125\034\036\001\001\000\012\031\044\032" +
    "\041\033\120\034\036\001\001\000\012\031\044\032\041" +
    "\033\113\034\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\152\015\151\020" +
    "\146\034\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\031\044\032\041\033\160\034" +
    "\036\001\001\000\002\001\001\000\016\016\167\017\163" +
    "\021\162\022\164\023\170\034\165\001\001\000\002\001" +
    "\001\000\004\016\207\001\001\000\004\023\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\031\044\032\041\033\200\034\036" +
    "\001\001\000\012\031\044\032\041\033\173\034\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\007\216\010" +
    "\063\011\060\012\061\013\070\024\057\026\071\027\066" +
    "\030\056\034\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\234\025\233" +
    "\026\232\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


     
    public void syntax_error(Symbol s){
        String error = "HTML: Error de sintaxis [ " + s.value + " ]";
        Reporter.addSyntaxError(error, s.left + 1, s.right + 1);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String error = "[FATAL] HTML: Error de sintaxis [ " + s.value + " ]";
        Reporter.addSyntaxError(error, s.left + 1, s.right + 1);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= html_start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // html_start ::= LESS_THAN HTML GREATER_THAN html_body CLOSING_LESS_THAN HTML GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("html_start",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // html_body ::= head_def body_def 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("html_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // html_body ::= head_def 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("html_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // html_body ::= body_def 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("html_body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // head_def ::= LESS_THAN HEAD GREATER_THAN title_def CLOSING_LESS_THAN HEAD GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("head_def",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // head_def ::= LESS_THAN HEAD GREATER_THAN CLOSING_LESS_THAN HEAD GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("head_def",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // title_def ::= LESS_THAN TITLE GREATER_THAN CLOSING_LESS_THAN TITLE GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("title_def",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // body_def ::= LESS_THAN BODY attributes GREATER_THAN body_block CLOSING_LESS_THAN BODY GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_def",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // body_block ::= body_block_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_block",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // body_block ::= epsilum 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_block",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // body_block_list ::= body_block_list body_statement 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_block_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // body_block_list ::= body_statement 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_block_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // body_statement ::= headers 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // body_statement ::= table 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // body_statement ::= p 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // body_statement ::= br 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // body_statement ::= hr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // body_statement ::= div 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // body_statement ::= error GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // body_statement ::= error SLASH_GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // headers ::= LESS_THAN H1 attributes GREATER_THAN CLOSING_LESS_THAN H1 GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("headers",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // headers ::= LESS_THAN H2 attributes GREATER_THAN CLOSING_LESS_THAN H2 GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("headers",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // headers ::= LESS_THAN H3 attributes GREATER_THAN CLOSING_LESS_THAN H3 GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("headers",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // headers ::= LESS_THAN H4 attributes GREATER_THAN CLOSING_LESS_THAN H4 GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("headers",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // headers ::= LESS_THAN H5 attributes GREATER_THAN CLOSING_LESS_THAN H5 GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("headers",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // headers ::= LESS_THAN H6 attributes GREATER_THAN CLOSING_LESS_THAN H6 GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("headers",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // table ::= LESS_THAN TABLE attributes GREATER_THAN table_def CLOSING_LESS_THAN TABLE GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // table_def ::= table_row_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_def",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // table_def ::= epsilum 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_def",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // table_row_list ::= table_row_list table_row 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_row_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // table_row_list ::= table_row 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_row_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // table_row ::= LESS_THAN TR attributes GREATER_THAN table_row_content CLOSING_LESS_THAN TR GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_row",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // table_row_content ::= table_header_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_row_content",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // table_row_content ::= table_data_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_row_content",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // table_row_content ::= epsilum 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_row_content",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // table_header_list ::= table_header_list table_header 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_header_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // table_header_list ::= table_header 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_header_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // table_header ::= LESS_THAN TH attributes GREATER_THAN CLOSING_LESS_THAN TH GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_header",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // table_data_list ::= table_data_list table_data 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_data_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // table_data_list ::= table_data 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_data_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // table_data ::= LESS_THAN TD attributes GREATER_THAN CLOSING_LESS_THAN TD GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_data",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // p ::= LESS_THAN P attributes GREATER_THAN p_content CLOSING_LESS_THAN P GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // p_content ::= p_content headers 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_content",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // p_content ::= headers 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_content",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // p_content ::= br 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p_content",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // br ::= LESS_THAN BR SLASH_GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("br",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // br ::= LESS_THAN BR GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("br",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // hr ::= LESS_THAN HR SLASH_GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // hr ::= LESS_THAN HR GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // div ::= LESS_THAN DIV attributes GREATER_THAN body_block CLOSING_LESS_THAN DIV GREATER_THAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("div",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // attributes ::= attribute_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attributes",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // attributes ::= epsilum 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attributes",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // attribute_list ::= attribute_list attribute 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // attribute_list ::= attribute 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // attribute ::= COLOR EQUAL COLOR_VALUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // attribute ::= TEXTCOLOR EQUAL COLOR_VALUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // attribute ::= ALIGN EQUAL ALIGN_VALUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // attribute ::= FONT EQUAL FONT_VALUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // epsilum ::= 
            {
              Symbol RESULT =null;
		
    RESULT = new Symbol(0);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilum",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
