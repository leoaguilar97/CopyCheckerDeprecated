/* The following code was generated by JFlex 1.4.3 on 4/2/18 11:44 PM */

package cp.html;
import java_cup.runtime.Symbol;
import cp.SymTable.SymTable;
import json.JsonResult;
import Reporter.Reporter;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/2/18 11:44 PM from the specification file
 * <tt>src/cp/html/html_lexical.jflex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int READ_HTML_VALUE_CLOSING_QM = 24;
  public static final int READ_CREPORT = 2;
  public static final int READ_PLAIN_TEXT = 8;
  public static final int READ_HTML_CLOSING_BRACE = 16;
  public static final int READ_HTML_CLOSING_TAG = 18;
  public static final int READ_HTML_TAG_EQUAL = 14;
  public static final int YYINITIAL = 0;
  public static final int READ_CR_CHAR = 6;
  public static final int READ_HTML_TAG_ATTRIBUTE = 12;
  public static final int READ_CR_STRING = 4;
  public static final int READ_HTML_TAG = 10;
  public static final int READ_HTML_VALUE = 22;
  public static final int READ_HTML_VALUE_OPENING_QM = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  3,  0,  4,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0, 42,  0, 41,  0,  0, 43,  0,  0,  0,  0,  0, 35,  0, 38, 
     0, 16, 17, 18, 19, 20, 21,  0,  0,  0,  0,  0, 37, 40, 39,  0, 
     0, 10, 12, 25, 11,  9, 29, 27,  5, 15, 30, 35,  8,  7, 28, 13, 
    24, 34, 22, 33,  6, 32, 23, 35, 26, 14, 31,  0, 44,  0,  0,  0, 
     0, 10, 12, 25, 11,  9, 29, 27,  5, 15, 30, 35,  8,  7, 28, 13, 
    24, 34, 22, 33,  6, 32, 23, 35, 26, 14, 31,  0, 36,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\1\2\1\3\1\1\2\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\13\5\15"+
    "\1\16\5\15\1\17\1\20\1\21\1\22\4\15\1\23"+
    "\1\24\11\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\2\0\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\0\1\50\1\0"+
    "\1\51\2\0\1\52\4\0\1\53\2\0\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\0\1\64"+
    "\1\0\1\65\2\0\1\66\12\25\4\0\1\67\11\0"+
    "\1\70\1\0\12\25\1\71\1\72\2\0\1\73\3\0"+
    "\1\74\1\75\1\76\2\0\1\77\3\25\1\100\4\25"+
    "\1\101\1\102\1\0\1\103\1\104\1\105\1\106\5\25"+
    "\1\0\5\25\1\0\1\107\2\25\1\0\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0249\0\u0276"+
    "\0\u02a3\0\u0249\0\u02d0\0\u0249\0\u0249\0\u02fd\0\u0249\0\u032a"+
    "\0\u02fd\0\u0249\0\u0357\0\u0384\0\u0249\0\u03b1\0\u03de\0\u040b"+
    "\0\u0438\0\u0249\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0249"+
    "\0\u0249\0\u0249\0\u0249\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u0249"+
    "\0\u0249\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708"+
    "\0\u0735\0\u0762\0\u0249\0\u0249\0\u0249\0\u0249\0\u0249\0\u0249"+
    "\0\u0249\0\u0249\0\u0249\0\u0249\0\u078f\0\u07bc\0\u0249\0\u0249"+
    "\0\u0249\0\u0249\0\u0249\0\u0249\0\u0249\0\u0249\0\u07e9\0\u0249"+
    "\0\u0816\0\u0249\0\u0843\0\u0870\0\u0249\0\u089d\0\u08ca\0\u08f7"+
    "\0\u0924\0\u0249\0\u0951\0\u097e\0\u0249\0\u0249\0\u0249\0\u0249"+
    "\0\u0249\0\u0249\0\u0249\0\u0249\0\u09ab\0\u0249\0\u09d8\0\u0249"+
    "\0\u0a05\0\u0a32\0\u0249\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13"+
    "\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b"+
    "\0\u0ca8\0\u0249\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6"+
    "\0\u0de3\0\u0e10\0\u0e3d\0\u0249\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1"+
    "\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u0249"+
    "\0\u0249\0\u1059\0\u1086\0\u0249\0\u10b3\0\u10e0\0\u110d\0\u0249"+
    "\0\u0249\0\u0249\0\u113a\0\u1167\0\u0249\0\u1194\0\u11c1\0\u11ee"+
    "\0\u05fa\0\u121b\0\u1248\0\u1275\0\u12a2\0\u0249\0\u0249\0\u12cf"+
    "\0\u0249\0\u0249\0\u0249\0\u0249\0\u12fc\0\u1329\0\u1356\0\u1383"+
    "\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb"+
    "\0\u05fa\0\u1518\0\u1545\0\u1572\0\u0249";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\4\17\37\16\1\17\1\20\3\16\1\21\3\16"+
    "\51\22\1\23\1\24\1\25\1\22\2\26\2\0\46\26"+
    "\1\27\1\26\1\30\2\26\2\0\46\26\1\0\1\31"+
    "\1\30\45\32\1\33\3\32\1\34\3\32\1\35\1\17"+
    "\1\35\1\17\1\35\1\36\1\37\4\35\1\40\1\41"+
    "\13\35\1\42\25\35\1\17\1\35\1\17\2\35\1\43"+
    "\3\35\1\44\16\35\1\45\3\35\1\46\10\35\1\47"+
    "\1\50\6\35\1\17\1\35\1\17\44\35\1\51\4\35"+
    "\1\52\1\17\1\52\1\17\43\52\1\53\5\52\1\35"+
    "\1\17\1\35\1\17\1\35\1\54\1\55\4\35\1\56"+
    "\1\57\13\35\1\60\25\35\1\17\1\35\1\17\46\35"+
    "\1\61\3\35\1\62\1\35\1\17\1\35\2\62\1\63"+
    "\2\62\1\64\1\65\3\62\1\66\6\35\1\67\1\70"+
    "\1\62\1\71\1\62\1\72\11\62\11\35\1\17\1\35"+
    "\1\17\46\35\1\73\2\35\123\0\1\74\57\0\1\75"+
    "\54\0\1\76\3\0\2\26\2\0\46\26\1\0\1\26"+
    "\7\0\1\77\17\0\1\100\5\0\1\101\15\0\1\102"+
    "\50\0\1\103\57\0\1\104\11\0\1\105\2\0\1\106"+
    "\6\0\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\33\0\1\116\4\0\1\117\1\120\3\0\1\121\6\0"+
    "\1\122\45\0\1\123\52\0\1\124\10\0\1\125\37\0"+
    "\1\126\53\0\1\127\61\0\1\130\54\0\1\131\106\0"+
    "\1\132\13\0\1\133\2\0\1\134\6\0\1\135\1\136"+
    "\1\137\1\140\1\141\1\142\1\143\33\0\1\144\4\0"+
    "\1\145\1\146\3\0\1\147\6\0\1\150\45\0\1\151"+
    "\52\0\1\152\10\0\1\153\27\0\1\62\3\0\13\62"+
    "\6\0\17\62\11\0\1\62\3\0\10\62\1\154\2\62"+
    "\6\0\17\62\11\0\1\62\3\0\2\62\1\155\10\62"+
    "\6\0\6\62\1\156\2\62\1\157\5\62\11\0\1\62"+
    "\3\0\4\62\1\160\6\62\6\0\17\62\11\0\1\62"+
    "\3\0\13\62\6\0\11\62\1\161\5\62\11\0\1\62"+
    "\3\0\10\62\1\162\2\62\6\0\17\62\11\0\1\62"+
    "\3\0\4\62\1\163\6\62\6\0\17\62\11\0\1\62"+
    "\3\0\4\62\1\164\6\62\6\0\17\62\11\0\1\62"+
    "\3\0\13\62\6\0\1\165\16\62\17\0\1\166\57\0"+
    "\1\167\56\0\1\170\46\0\1\171\75\0\1\172\40\0"+
    "\1\173\73\0\1\174\41\0\1\175\45\0\1\176\100\0"+
    "\1\177\27\0\1\200\57\0\1\201\56\0\1\202\46\0"+
    "\1\203\75\0\1\204\40\0\1\205\42\0\1\62\3\0"+
    "\13\62\6\0\1\206\16\62\11\0\1\62\3\0\5\62"+
    "\1\207\5\62\6\0\17\62\11\0\1\62\3\0\5\62"+
    "\1\210\5\62\6\0\17\62\11\0\1\62\3\0\13\62"+
    "\6\0\12\62\1\211\4\62\11\0\1\62\3\0\13\62"+
    "\6\0\1\212\16\62\11\0\1\62\3\0\13\62\6\0"+
    "\14\62\1\213\2\62\11\0\1\62\3\0\13\62\6\0"+
    "\10\62\1\214\6\62\11\0\1\62\3\0\13\62\6\0"+
    "\1\215\16\62\11\0\1\62\3\0\13\62\6\0\6\62"+
    "\1\216\10\62\11\0\1\62\3\0\12\62\1\217\6\0"+
    "\17\62\20\0\1\220\57\0\1\221\51\0\1\222\54\0"+
    "\1\223\62\0\1\224\44\0\1\225\101\0\1\226\36\0"+
    "\1\227\45\0\1\230\56\0\1\231\57\0\1\232\51\0"+
    "\1\233\54\0\1\234\62\0\1\235\37\0\1\62\3\0"+
    "\5\62\1\236\5\62\6\0\17\62\11\0\1\62\3\0"+
    "\13\62\6\0\1\237\16\62\11\0\1\62\3\0\13\62"+
    "\6\0\1\240\16\62\11\0\1\62\3\0\3\62\1\241"+
    "\7\62\6\0\17\62\11\0\1\62\3\0\4\62\1\242"+
    "\6\62\6\0\17\62\11\0\1\62\3\0\13\62\6\0"+
    "\12\62\1\243\4\62\11\0\1\62\3\0\10\62\1\241"+
    "\2\62\6\0\17\62\11\0\1\62\3\0\6\62\1\244"+
    "\4\62\6\0\17\62\11\0\1\62\3\0\1\62\1\245"+
    "\11\62\6\0\17\62\11\0\1\62\3\0\13\62\6\0"+
    "\13\62\1\241\3\62\21\0\1\246\54\0\1\247\74\0"+
    "\1\250\57\0\1\251\46\0\1\252\37\0\1\253\54\0"+
    "\1\254\44\0\1\62\3\0\6\62\1\214\4\62\6\0"+
    "\17\62\11\0\1\62\3\0\12\62\1\255\6\0\17\62"+
    "\11\0\1\62\3\0\5\62\1\256\5\62\6\0\17\62"+
    "\11\0\1\62\3\0\13\62\6\0\3\62\1\257\13\62"+
    "\11\0\1\62\3\0\12\62\1\260\6\0\17\62\11\0"+
    "\1\62\3\0\4\62\1\241\6\62\6\0\17\62\11\0"+
    "\1\62\3\0\13\62\6\0\1\261\16\62\25\0\1\262"+
    "\40\0\1\62\3\0\3\62\1\263\7\62\6\0\17\62"+
    "\11\0\1\62\3\0\13\62\6\0\6\62\1\264\10\62"+
    "\11\0\1\62\3\0\1\265\12\62\6\0\17\62\11\0"+
    "\1\62\3\0\4\62\1\266\6\62\6\0\17\62\11\0"+
    "\1\62\3\0\5\62\1\267\5\62\6\0\17\62\20\0"+
    "\1\270\45\0\1\62\3\0\3\62\1\214\7\62\6\0"+
    "\17\62\11\0\1\62\3\0\13\62\6\0\10\62\1\206"+
    "\6\62\11\0\1\62\3\0\5\62\1\271\5\62\6\0"+
    "\17\62\11\0\1\62\3\0\13\62\6\0\1\272\16\62"+
    "\11\0\1\62\3\0\6\62\1\273\4\62\6\0\17\62"+
    "\25\0\1\274\40\0\1\62\3\0\6\62\1\265\4\62"+
    "\6\0\17\62\11\0\1\62\3\0\10\62\1\271\2\62"+
    "\6\0\17\62\36\0\1\275\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5535];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\2\11\2\1\1\11\1\1\2\11\1\1\1\11"+
    "\2\1\1\11\2\1\1\11\4\1\1\11\5\1\4\11"+
    "\4\1\2\11\11\1\12\11\2\0\10\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\4\0\1\11\2\0\10\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\12\1\4\0"+
    "\1\11\11\0\1\11\1\0\12\1\2\11\2\0\1\11"+
    "\3\0\3\11\2\0\1\11\10\1\2\11\1\0\4\11"+
    "\5\1\1\0\5\1\1\0\3\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    StringBuffer crcode = new StringBuffer();

    SymTable table = new SymTable();

    JsonResult jsonResult = new JsonResult();
    
    private Symbol symbol(int type, Object value, boolean goBack) {
        return new Symbol(type, yyline, yycolumn + (goBack ? 1 : 0), value);
    }

    private Symbol symbol(int type, Object value) {
        return symbol(type, value, false);
    }

    public void setJsonResult(JsonResult jsonResult){
        this.jsonResult = jsonResult;
    }

    private HtmlCreator htmlCreator = new HtmlCreator();
 
    public void setHtmlCreator(HtmlCreator htmlCreator){
        this.htmlCreator = htmlCreator;
    }

    private String compileCP(String code){

        cp.Compiler crCompiler = new cp.Compiler(table, jsonResult, yyline, yycolumn);

        String r = crCompiler.Analyze(code); 
        
        table = crCompiler.getSymTable();

        return r;
    }

    private void addProperty(String name, String value){
        try {
            htmlCreator.addProperty(name, value);
        } catch (Exception ex) {
            Reporter.addSemanticError(ex.getMessage(), yyline + 1, yycolumn);
        }
    }

    String currentPropertyName = "";


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 41: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE); htmlCreator.addTag(yytext()); return symbol(sym.TR, yytext());
          }
        case 73: break;
        case 46: 
          { yybegin(READ_HTML_CLOSING_BRACE); htmlCreator.closeTag(); return symbol(sym.H3, yytext());
          }
        case 74: break;
        case 64: 
          { yybegin(READ_HTML_VALUE_CLOSING_QM);

        if (! "".equals(currentPropertyName)){
            addProperty(currentPropertyName, yytext());    
            currentPropertyName = "";
        }

        return symbol(sym.COLOR_VALUE, yytext());
          }
        case 75: break;
        case 4: 
          { crcode.append(yytext());
          }
        case 76: break;
        case 7: 
          { crcode.append( yytext() );
          }
        case 77: break;
        case 44: 
          { yybegin(READ_HTML_CLOSING_BRACE); htmlCreator.closeTag(); return symbol(sym.H1, yytext());
          }
        case 78: break;
        case 18: 
          { yybegin(YYINITIAL); return symbol(sym.GREATER_THAN, yytext());
          }
        case 79: break;
        case 22: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE);
          }
        case 80: break;
        case 36: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE); htmlCreator.addTag(yytext()); return symbol(sym.H5, yytext());
          }
        case 81: break;
        case 1: 
          { string.setLength(0);
    string.append(yytext());
    yybegin(READ_PLAIN_TEXT);
          }
        case 82: break;
        case 59: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE); htmlCreator.addTag(yytext()); return symbol(sym.BODY, yytext());
          }
        case 83: break;
        case 62: 
          { yybegin(READ_HTML_CLOSING_BRACE); htmlCreator.closeTag(); return symbol(sym.HEAD, yytext());
          }
        case 84: break;
        case 49: 
          { yybegin(READ_HTML_CLOSING_BRACE); htmlCreator.closeTag(); return symbol(sym.H6, yytext());
          }
        case 85: break;
        case 40: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE); htmlCreator.addTag(yytext()); return symbol(sym.TD, yytext());
          }
        case 86: break;
        case 42: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE); htmlCreator.addBr(); return symbol(sym.BR, yytext());
          }
        case 87: break;
        case 67: 
          { yybegin(READ_HTML_TAG_EQUAL);
        currentPropertyName = "align";
        return symbol(sym.ALIGN, yytext());
          }
        case 88: break;
        case 21: 
          { yybegin(READ_HTML_VALUE_CLOSING_QM);

        if (! "".equals(currentPropertyName)){
            addProperty(currentPropertyName, yytext());    
            currentPropertyName = "";
        }

        return symbol(sym.FONT_VALUE, yytext());
          }
        case 89: break;
        case 12: 
          { yybegin(READ_HTML_TAG);
        htmlCreator.addText(string.toString());
        return symbol(sym.LESS_THAN, yytext());
          }
        case 90: break;
        case 43: 
          { yybegin(YYINITIAL);
        return symbol(sym.SLASH_GREATER_THAN, yytext());
          }
        case 91: break;
        case 3: 
          { yybegin(READ_HTML_TAG); return symbol(sym.LESS_THAN, yytext());
          }
        case 92: break;
        case 34: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE); htmlCreator.addTag(yytext()); return symbol(sym.H3, yytext());
          }
        case 93: break;
        case 55: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE); htmlCreator.addTag(yytext()); return symbol(sym.DIV, yytext());
          }
        case 94: break;
        case 17: 
          { String err = "Caracter inesperado < %s >. Linea: %s. Columna: %s.";
        System.err.println(String.format(err, yytext(), yyline, yycolumn));
          }
        case 95: break;
        case 28: 
          { crcode.append('\n');
          }
        case 96: break;
        case 29: 
          { crcode.append('\"');
          }
        case 97: break;
        case 54: 
          { yybegin(READ_HTML_CLOSING_BRACE); htmlCreator.addBr(); return symbol(sym.BR, yytext());
          }
        case 98: break;
        case 8: 
          { crcode.append("\"");
        yybegin(READ_CREPORT);
          }
        case 99: break;
        case 47: 
          { yybegin(READ_HTML_CLOSING_BRACE); htmlCreator.closeTag(); return symbol(sym.H4, yytext());
          }
        case 100: break;
        case 38: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE); htmlCreator.addHr(); return symbol(sym.HR, yytext());
          }
        case 101: break;
        case 63: 
          { yybegin(READ_HTML_CLOSING_BRACE); htmlCreator.closeTag(); return symbol(sym.BODY, yytext());
          }
        case 102: break;
        case 27: 
          { crcode.append('\r');
          }
        case 103: break;
        case 51: 
          { yybegin(READ_HTML_CLOSING_BRACE); htmlCreator.closeTag(); return symbol(sym.TH, yytext());
          }
        case 104: break;
        case 45: 
          { yybegin(READ_HTML_CLOSING_BRACE); htmlCreator.closeTag(); return symbol(sym.H2, yytext());
          }
        case 105: break;
        case 26: 
          { crcode.append('\t');
          }
        case 106: break;
        case 71: 
          { yybegin(READ_HTML_VALUE_CLOSING_QM);

        if (! "".equals(currentPropertyName)){
            addProperty(currentPropertyName, yytext());    
            currentPropertyName = "";
        }

        return symbol(sym.ALIGN_VALUE, yytext());
          }
        case 107: break;
        case 11: 
          { string.append(yytext());
          }
        case 108: break;
        case 32: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE); htmlCreator.addTag(yytext()); return symbol(sym.H1, yytext());
          }
        case 109: break;
        case 66: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE); htmlCreator.addTag(yytext()); return symbol(sym.TITLE, yytext());
          }
        case 110: break;
        case 70: 
          { yybegin(READ_HTML_CLOSING_BRACE); htmlCreator.closeTag(); return symbol(sym.TITLE, yytext());
          }
        case 111: break;
        case 10: 
          { crcode.append("'");
        yybegin(READ_CREPORT);
          }
        case 112: break;
        case 14: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE); htmlCreator.addTag(yytext()); return symbol(sym.P, yytext());
          }
        case 113: break;
        case 50: 
          { yybegin(READ_HTML_CLOSING_BRACE); htmlCreator.addHr(); return symbol(sym.HR, yytext());
          }
        case 114: break;
        case 24: 
          { crcode.setLength(0);
    yybegin(READ_CREPORT);
          }
        case 115: break;
        case 25: 
          { yybegin(YYINITIAL);
        htmlCreator.addText(compileCP(crcode.toString()));
          }
        case 116: break;
        case 56: 
          { yybegin(READ_HTML_CLOSING_BRACE); htmlCreator.closeTag(); return symbol(sym.DIV, yytext());
          }
        case 117: break;
        case 68: 
          { yybegin(READ_HTML_TAG_EQUAL);
        currentPropertyName = "color";
        return symbol(sym.COLOR, yytext());
          }
        case 118: break;
        case 2: 
          { ;
          }
        case 119: break;
        case 53: 
          { yybegin(READ_HTML_CLOSING_BRACE); htmlCreator.closeTag(); return symbol(sym.TR, yytext());
          }
        case 120: break;
        case 57: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE); htmlCreator.addTag(yytext()); return symbol(sym.HTML, yytext());
          }
        case 121: break;
        case 35: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE); htmlCreator.addTag(yytext()); return symbol(sym.H4, yytext());
          }
        case 122: break;
        case 65: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE); htmlCreator.addTag(yytext()); return symbol(sym.TABLE, yytext());
          }
        case 123: break;
        case 69: 
          { yybegin(READ_HTML_CLOSING_BRACE); htmlCreator.closeTag(); return symbol(sym.TABLE, yytext());
          }
        case 124: break;
        case 30: 
          { yybegin(READ_HTML_CLOSING_TAG);
        htmlCreator.addText(string.toString());
        return symbol(sym.CLOSING_LESS_THAN, yytext());
          }
        case 125: break;
        case 31: 
          { crcode.setLength(0);
        yybegin(READ_CREPORT);
          }
        case 126: break;
        case 23: 
          { yybegin(READ_HTML_CLOSING_TAG); return symbol(sym.CLOSING_LESS_THAN, yytext());
          }
        case 127: break;
        case 6: 
          { crcode.append("'");
        yybegin(READ_CR_CHAR);
          }
        case 128: break;
        case 48: 
          { yybegin(READ_HTML_CLOSING_BRACE); htmlCreator.closeTag(); return symbol(sym.H5, yytext());
          }
        case 129: break;
        case 13: 
          { String err = "Caracter inesperado < %s >";
        Reporter.addLexicError(String.format(err), yyline + 1, yycolumn);
          }
        case 130: break;
        case 5: 
          { crcode.append("\"");
        yybegin(READ_CR_STRING);
          }
        case 131: break;
        case 20: 
          { yybegin(READ_HTML_VALUE);
          }
        case 132: break;
        case 9: 
          { crcode.append('\\');
          }
        case 133: break;
        case 60: 
          { yybegin(READ_HTML_TAG_EQUAL);
        currentPropertyName = "font";
        return symbol(sym.FONT, yytext());
          }
        case 134: break;
        case 52: 
          { yybegin(READ_HTML_CLOSING_BRACE); htmlCreator.closeTag(); return symbol(sym.TD, yytext());
          }
        case 135: break;
        case 58: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE); htmlCreator.addTag(yytext()); return symbol(sym.HEAD, yytext());
          }
        case 136: break;
        case 15: 
          { yybegin(YYINITIAL);
        return symbol(sym.GREATER_THAN, yytext());
          }
        case 137: break;
        case 72: 
          { yybegin(READ_HTML_TAG_EQUAL);
        currentPropertyName = "textcolor";
        return symbol(sym.TEXTCOLOR, yytext());
          }
        case 138: break;
        case 37: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE); htmlCreator.addTag(yytext());  return symbol(sym.H6, yytext());
          }
        case 139: break;
        case 39: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE); htmlCreator.addTag(yytext()); return symbol(sym.TH, yytext());
          }
        case 140: break;
        case 33: 
          { yybegin(READ_HTML_TAG_ATTRIBUTE); htmlCreator.addTag(yytext()); return symbol(sym.H2, yytext());
          }
        case 141: break;
        case 16: 
          { yybegin(READ_HTML_VALUE_OPENING_QM); 
        return symbol(sym.EQUAL, yytext());
          }
        case 142: break;
        case 19: 
          { yybegin(READ_HTML_CLOSING_BRACE); htmlCreator.closeTag(); return symbol(sym.P, yytext());
          }
        case 143: break;
        case 61: 
          { yybegin(READ_HTML_CLOSING_BRACE); htmlCreator.closeTag(); return symbol(sym.HTML, yytext());
          }
        case 144: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
