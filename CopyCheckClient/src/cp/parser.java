
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package cp;

import java_cup.runtime.Symbol;
import cp.SymTable.SymTable;
import Reporter.Reporter;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\003\000\002\025" +
    "\002\000\002\003\005\000\002\007\005\000\002\007\003" +
    "\000\002\026\002\000\002\005\006\000\002\005\003\000" +
    "\002\010\003\000\002\010\003\000\002\011\005\000\002" +
    "\011\004\000\002\011\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\006\003\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\003\000\002\021\004" +
    "\000\002\021\005\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\004\000\002\022\004\000\002\013\003\000\002\024" +
    "\005\000\002\024\004\000\002\024\003\000\002\024\003" +
    "\000\002\024\005\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\023\005\000\002\023\005\000\002\023" +
    "\003\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\015\003\000\002\015\003\000" +
    "\002\017\004\000\002\017\003\000\002\012\006\000\002" +
    "\020\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\024\002\uffc1\003\022\011\025\012\011\013" +
    "\014\014\007\015\020\036\021\041\010\001\002\000\004" +
    "\002\uffc5\001\002\000\024\002\uffc3\003\uffc3\011\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\036\uffc3\041\uffc3\001\002" +
    "\000\004\007\145\001\002\000\004\041\ufff0\001\002\000" +
    "\050\005\uffd9\006\uffd9\007\uffd9\010\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\001\002\000\004\041\ufff2\001\002\000\004\002\144\001" +
    "\002\000\004\041\uffff\001\002\000\004\041\ufff1\001\002" +
    "\000\024\002\uffc6\003\022\011\025\012\011\013\014\014" +
    "\007\015\020\036\021\041\010\001\002\000\022\010\065" +
    "\016\073\017\066\020\071\021\067\022\064\034\063\035" +
    "\072\001\002\000\004\007\062\001\002\000\004\041\uffef" +
    "\001\002\000\004\004\030\001\002\000\004\007\027\001" +
    "\002\000\004\007\026\001\002\000\004\002\000\001\002" +
    "\000\004\041\ufff3\001\002\000\024\002\uffc9\003\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\036\uffc9\041\uffc9" +
    "\001\002\000\024\002\uffc7\003\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\036\uffc7\041\uffc7\001\002\000\020" +
    "\004\040\017\034\037\035\040\041\041\010\042\032\043" +
    "\037\001\002\000\046\005\uffe0\006\uffe0\007\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\033\uffe0\034\061" +
    "\035\060\001\002\000\042\005\uffdd\006\uffdd\007\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd\001" +
    "\002\000\016\005\057\016\044\017\045\020\046\021\047" +
    "\022\043\001\002\000\020\004\040\017\034\037\035\040" +
    "\041\041\010\042\032\043\037\001\002\000\042\005\uffdf" +
    "\006\uffdf\007\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\033\uffdf\001\002\000\042\005\uffe3\006\uffe3\007" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\033" +
    "\uffe3\001\002\000\042\005\uffdc\006\uffdc\007\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\033\uffdc\001\002" +
    "\000\020\004\040\017\034\037\035\040\041\041\010\042" +
    "\032\043\037\001\002\000\042\005\uffde\006\uffde\007\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\033\uffde" +
    "\001\002\000\016\005\050\016\044\017\045\020\046\021" +
    "\047\022\043\001\002\000\020\004\040\017\034\037\035" +
    "\040\041\041\010\042\032\043\037\001\002\000\020\004" +
    "\040\017\034\037\035\040\041\041\010\042\032\043\037" +
    "\001\002\000\020\004\040\017\034\037\035\040\041\041" +
    "\010\042\032\043\037\001\002\000\020\004\040\017\034" +
    "\037\035\040\041\041\010\042\032\043\037\001\002\000" +
    "\020\004\040\017\034\037\035\040\041\041\010\042\032" +
    "\043\037\001\002\000\042\005\uffe1\006\uffe1\007\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\033\uffe1\001" +
    "\002\000\042\005\uffe5\006\uffe5\007\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\043\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5\001\002\000\042" +
    "\005\uffe6\006\uffe6\007\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\043\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\033\uffe6\001\002\000\042\005\uffe7\006" +
    "\uffe7\007\uffe7\016\uffe7\017\uffe7\020\046\021\047\022\043" +
    "\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\033\uffe7\001\002\000\042\005\uffe8\006\uffe8\007\uffe8" +
    "\016\uffe8\017\uffe8\020\046\021\047\022\043\023\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\033\uffe8" +
    "\001\002\000\042\005\uffe4\006\uffe4\007\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4\001\002\000" +
    "\042\005\uffe2\006\uffe2\007\uffe2\016\uffe2\017\uffe2\020\046" +
    "\021\047\022\043\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\033\uffe2\001\002\000\004\007\uffc2" +
    "\001\002\000\042\005\uffda\006\uffda\007\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\033\uffda\001\002\000" +
    "\042\005\uffdb\006\uffdb\007\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\033\uffdb\001\002\000\024\002\uffca" +
    "\003\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\036" +
    "\uffca\041\uffca\001\002\000\004\007\ufff5\001\002\000\004" +
    "\010\131\001\002\000\026\004\uffee\017\uffee\032\uffee\037" +
    "\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee" +
    "\001\002\000\004\010\130\001\002\000\004\010\127\001" +
    "\002\000\026\004\105\017\034\032\101\037\035\040\041" +
    "\041\010\042\032\043\037\044\102\045\103\001\002\000" +
    "\004\010\075\001\002\000\004\007\ufff4\001\002\000\004" +
    "\010\074\001\002\000\026\004\uffed\017\uffed\032\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed" +
    "\001\002\000\026\004\uffeb\017\uffeb\032\uffeb\037\uffeb\040" +
    "\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\001\002" +
    "\000\004\007\ufff6\001\002\000\012\006\ufff7\007\ufff7\030" +
    "\123\031\124\001\002\000\034\006\ufff8\007\ufff8\016\044" +
    "\017\045\020\046\021\047\022\043\023\116\024\113\025" +
    "\117\026\111\027\115\033\114\001\002\000\026\004\105" +
    "\017\034\032\101\037\035\040\041\041\010\042\032\043" +
    "\037\044\102\045\103\001\002\000\014\005\uffd6\006\uffd6" +
    "\007\uffd6\030\uffd6\031\uffd6\001\002\000\014\005\uffd5\006" +
    "\uffd5\007\uffd5\030\uffd5\031\uffd5\001\002\000\012\006\uffcb" +
    "\007\uffcb\030\uffcb\031\uffcb\001\002\000\026\004\105\017" +
    "\034\032\101\037\035\040\041\041\010\042\032\043\037" +
    "\044\102\045\103\001\002\000\032\005\050\016\044\017" +
    "\045\020\046\021\047\022\043\023\116\024\113\025\117" +
    "\026\111\027\115\033\114\001\002\000\004\005\110\001" +
    "\002\000\014\005\uffd4\006\uffd4\007\uffd4\030\uffd4\031\uffd4" +
    "\001\002\000\020\004\uffd0\017\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\043\uffd0\001\002\000\020\004\040\017\034" +
    "\037\035\040\041\041\010\042\032\043\037\001\002\000" +
    "\020\004\uffd1\017\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\001\002\000\020\004\uffce\017\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\001\002\000\020\004\uffcf" +
    "\017\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\001" +
    "\002\000\020\004\uffd3\017\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\001\002\000\020\004\uffd2\017\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\001\002\000\026" +
    "\005\uffd8\006\uffd8\007\uffd8\016\044\017\045\020\046\021" +
    "\047\022\043\030\uffd8\031\uffd8\001\002\000\030\016\044" +
    "\017\045\020\046\021\047\022\043\023\116\024\113\025" +
    "\117\026\111\027\115\033\114\001\002\000\014\005\uffd7" +
    "\006\uffd7\007\uffd7\030\uffd7\031\uffd7\001\002\000\026\004" +
    "\105\017\034\032\101\037\035\040\041\041\010\042\032" +
    "\043\037\044\102\045\103\001\002\000\026\004\105\017" +
    "\034\032\101\037\035\040\041\041\010\042\032\043\037" +
    "\044\102\045\103\001\002\000\012\006\uffcc\007\uffcc\030" +
    "\uffcc\031\uffcc\001\002\000\012\006\uffcd\007\uffcd\030\uffcd" +
    "\031\uffcd\001\002\000\026\004\uffea\017\uffea\032\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea" +
    "\001\002\000\026\004\uffec\017\uffec\032\uffec\037\uffec\040" +
    "\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\001\002" +
    "\000\026\004\uffe9\017\uffe9\032\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\001\002\000\024" +
    "\002\uffc4\003\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\036\uffc4\041\uffc4\001\002\000\004\041\010\001\002" +
    "\000\010\006\ufff9\007\ufff9\010\ufffb\001\002\000\006\006" +
    "\137\007\ufffe\001\002\000\006\006\ufffc\007\ufffc\001\002" +
    "\000\004\041\010\001\002\000\006\006\ufffd\007\ufffd\001" +
    "\002\000\004\010\142\001\002\000\026\004\105\017\034" +
    "\032\101\037\035\040\041\041\010\042\032\043\037\044" +
    "\102\045\103\001\002\000\006\006\ufffa\007\ufffa\001\002" +
    "\000\004\002\001\001\002\000\024\002\uffc8\003\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\036\uffc8\041\uffc8" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\026\002\011\003\016\004\012\011\005\012" +
    "\022\013\015\015\023\016\004\017\014\020\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\132\001\001\000\002\001\001\000" +
    "\016\003\016\004\012\011\005\012\022\013\015\016\131" +
    "\001\001\000\004\006\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\030\021\032\022\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\030\021\055\022\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\030\021\041\022\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\030\021\054\022\035\001\001\000" +
    "\010\013\030\021\053\022\035\001\001\000\010\013\030" +
    "\021\052\022\035\001\001\000\010\013\030\021\051\022" +
    "\035\001\001\000\010\013\030\021\050\022\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\075\013\030\021\077\022\035\023\076\024\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\111\001\001\000\012\013" +
    "\030\021\120\022\035\024\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\030\021" +
    "\105\022\035\024\106\001\001\000\004\014\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\030\021\117\022\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\111\001\001" +
    "\000\002\001\001\000\014\013\030\021\120\022\035\023" +
    "\125\024\103\001\001\000\014\013\030\021\120\022\035" +
    "\023\124\024\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\135\007\134\013\133\001" +
    "\001\000\004\026\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\137\013\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\142\013\030\021\077" +
    "\022\035\023\076\024\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


    
    String print_result = "";

    public void syntax_error(Symbol s){
        Reporter.addSyntaxError("CReport: Error de sintaxis [" + s.value + "]", s.left + 1, s.right + 1);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception { 
        Reporter.addSyntaxError("[FATAL] CReport: Error de sintaxis [" + s.value + "]",  s.left + 1, s.right + 1);
    }

    public String getPrintResult(){
        return print_result;
    }

    public void setSymTable(SymTable table){
        this.table = table;
    }

    SymTable table = new SymTable();  
   
    public Object performBoolOperation(Object be, Object bse, String op){
        try {
            return table.performBoolOperation(be, bse, op);
        } catch (Exception ex){

            Symbol curr = (java_cup.runtime.Symbol) stack.peek();
            int line = curr.left;
            int col = curr.right;

            Reporter.addSemanticError(ex.getMessage(), line, col);

            return null;
        }
    }
    
    public Object performOperation(Object op1, Object op2, String operator){
        try {
            return table.performOperation(op1, op2, operator);
        } catch (Exception ex){

            Symbol curr = (java_cup.runtime.Symbol) stack.peek();
            int line = curr.left;
            int col = curr.right;

            Reporter.addSemanticError(ex.getMessage(), line, col);

            return null;
        }
    }

    public Object performOperation(Object op1, String operator){
        try {
            return table.performOperation(op1, operator);
        } catch (Exception ex){

            Symbol curr = (java_cup.runtime.Symbol) stack.peek();
            int line = curr.left;
            int col = curr.right;

            Reporter.addSemanticError(ex.getMessage(), line, col);

            return null;
        }        
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    String curr_type = "";
    String curr_name = "";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial_state EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial_state ::= scope_statement 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("initial_state",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              String RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

    curr_type = vt;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // var_declaration ::= var_type NT$0 var_instantiation_list 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int villeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vil = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // var_instantiation_list ::= var_instantiation_list COMMA var_instantiation 
            {
              String RESULT =null;
		int villeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String vil = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_instantiation_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // var_instantiation_list ::= var_instantiation 
            {
              String RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_instantiation_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              String RESULT =null;
		int evnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int evnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String evn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

    try {
        table.addSymbol(curr_type, evn);
        curr_name = evn;
    } catch(Exception ex){
        Reporter.addSemanticError(ex.getMessage(), evnleft, evnright);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_instantiation ::= exp_var_name NT$1 EQUAL var_possible_value 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int evnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int evnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String evn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vpvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vpv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_instantiation",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_instantiation ::= exp_var_name 
            {
              String RESULT =null;
		int evnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int evnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String evn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    try {
        table.addSymbol(curr_type, evn);
        curr_name = evn;
    } catch(Exception ex){
        Reporter.addSemanticError(ex.getMessage(), evnleft, evnright);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_instantiation",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_possible_value ::= exp_declaration 
            {
              String RESULT =null;
		int edleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int edright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ed = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    try {
        table.setValue(curr_name, ed, "=");         
    } catch(Exception ex){
        Reporter.addSemanticError(ex.getMessage(), edleft, edright);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_possible_value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_possible_value ::= bool_expression 
            {
              String RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    try {
        table.setValue(curr_name, be, "=");       
    } catch(Exception ex){
        Reporter.addSemanticError(ex.getMessage(), beleft, beright);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_possible_value",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_call ::= exp_var_name var_equality_operator var_possible_value 
            {
              String RESULT =null;
		int evnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int evnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String evn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int veoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int veoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String veo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vpvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vpv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    try {    
        table.setValue(evn, vpv, veo);      
    } catch(Exception ex){
        Reporter.addSemanticError(ex.getMessage(), vpvleft, vpvright);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_call ::= exp_var_name PLUSPLUS 
            {
              String RESULT =null;
		int evnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int evnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String evn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = performOperation(evn, "++").toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_call ::= exp_var_name MINUSMINUS 
            {
              String RESULT =null;
		int evnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int evnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String evn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = performOperation(evn, "--").toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_type ::= ENTERO 
            {
              String RESULT =null;
		
    RESULT = "entero"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_type ::= BOOLEANO 
            {
              String RESULT =null;
		
    RESULT = "booleano"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_type ::= CARACTER 
            {
              String RESULT =null;
		
    RESULT = "caracter"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var_type ::= DECIMAL 
            {
              String RESULT =null;
		 
    RESULT = "decimal"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var_type ::= TEXTO 
            {
              String RESULT =null;
		 
    RESULT = "texto"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_type",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // var_equality_operator ::= EQUAL 
            {
              String RESULT =null;
		
    RESULT = "=";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_equality_operator",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // var_equality_operator ::= AR_SUM EQUAL 
            {
              String RESULT =null;
		
    RESULT = "+=";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_equality_operator",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_equality_operator ::= AR_SUB EQUAL 
            {
              String RESULT =null;
		
    RESULT = "-=";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_equality_operator",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_equality_operator ::= AR_MUL EQUAL 
            {
              String RESULT =null;
		
    RESULT = "*=";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_equality_operator",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_equality_operator ::= AR_DIV EQUAL 
            {
              String RESULT =null;
		
    RESULT = "/=";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_equality_operator",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_equality_operator ::= AR_MOD EQUAL 
            {
              String RESULT =null;
		
    RESULT = "%=";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_equality_operator",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp_declaration ::= exp_declaration AR_SUM exp_declaration 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = performOperation(e1, e2, "+"); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp_declaration ::= exp_declaration AR_SUB exp_declaration 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = performOperation(e1, e2, "-"); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp_declaration ::= exp_declaration AR_MUL exp_declaration 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = performOperation(e1, e2, "*"); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp_declaration ::= exp_declaration AR_DIV exp_declaration 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = performOperation(e1, e2, "/"); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp_declaration ::= exp_declaration AR_MOD exp_declaration 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = performOperation(e1, e2, "%"); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp_declaration ::= exp_value 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = n; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp_declaration ::= AR_SUB exp_declaration 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = performOperation(e, "-"); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp_declaration ::= OPEN_PARENTHESIS exp_declaration CLOSING_PARENTHESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
    RESULT = e; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_declaration",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp_value ::= exp_var_name 
            {
              Object RESULT =null;
		int evnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int evnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String evn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    try {        
        RESULT = table.getValue(evn); 
    } catch (Exception ex){
        Reporter.addSemanticError(ex.getMessage(), evnleft, evnright);
        RESULT = null;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp_value ::= EXPNUMBER 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    RESULT = Integer.parseInt(number.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp_value ::= EXPDECIMAL 
            {
              Object RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decimal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = Double.parseDouble(decimal.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp_value ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = (String) sl;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp_value ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = cl.toString().charAt(0);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp_value ::= exp_var_name PLUSPLUS 
            {
              Object RESULT =null;
		int evnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int evnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String evn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = performOperation(table.getValue(evn), "++");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp_value ::= exp_var_name MINUSMINUS 
            {
              Object RESULT =null;
		int evnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int evnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String evn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = performOperation(table.getValue(evn), "--");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp_var_name ::= EXPID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = (String) id;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_var_name",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bool_single_expression ::= exp_declaration bool_operator exp_declaration 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String bo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = performOperation(exp, exp2, bo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_single_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bool_single_expression ::= NOTBOP bool_single_expression 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = performOperation(be, "!");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_single_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bool_single_expression ::= BTRUE 
            {
              Object RESULT =null;
		
    RESULT = true;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_single_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bool_single_expression ::= BFALSE 
            {
              Object RESULT =null;
		
    RESULT = false; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_single_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bool_single_expression ::= OPEN_PARENTHESIS bool_single_expression CLOSING_PARENTHESIS 
            {
              Object RESULT =null;
		int bseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = bse;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_single_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bool_operator ::= GREATER_THAN 
            {
              String RESULT =null;
		
    RESULT = ">";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bool_operator ::= GREATEQUAL_THAN 
            {
              String RESULT =null;
		
    RESULT = ">=";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bool_operator ::= LESS_THAN 
            {
              String RESULT =null;
		
    RESULT = "<";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bool_operator ::= LESSEQUAL_THAN 
            {
              String RESULT =null;
		
    RESULT = "<=";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bool_operator ::= NOT_EQUAL 
            {
              String RESULT =null;
		
    RESULT = "!=";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bool_operator ::= BEQUAL 
            {
              String RESULT =null;
		
    RESULT = "==";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bool_expression ::= bool_expression ANDBOP bool_expression 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = performBoolOperation(be, bse, "&&");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bool_expression ::= bool_expression ORBOP bool_expression 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = performBoolOperation(be, bse, "||");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bool_expression ::= bool_single_expression 
            {
              Object RESULT =null;
		int bseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bse = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = bse;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= var_declaration SEMICOLON 
            {
              String RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= print_stmt SEMICOLON 
            {
              String RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ps = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= var_call SEMICOLON 
            {
              String RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= error SEMICOLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // scope_statement ::= statement_list 
            {
              String RESULT =null;
		int stmlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stml = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scope_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // scope_statement ::= epsilum 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scope_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement_list ::= statement_list statement 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement_list ::= statement 
            {
              String RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stmt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // print_stmt ::= PRINT OPEN_PARENTHESIS exp_declaration CLOSING_PARENTHESIS 
            {
              String RESULT =null;
		int edleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int edright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ed = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if (ed != null){
        String res = ed.toString();
        Reporter.log("PRINT: " + res, false);
        print_result += res;
    } else {
        Reporter.log("[PRINT ERROR] Error semántico: Referencia a variable nula o funcion incorrecta.", true);
        print_result += "<span style=\"color: red; font-family: consolas; font-size: 12px\" Error </span>";
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // epsilum ::= 
            {
              String RESULT =null;
		 
    RESULT = "Epsilum"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilum",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
