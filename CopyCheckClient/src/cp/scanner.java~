/* The following code was generated by JFlex 1.4.3 on 4/2/18 11:48 PM */

package cp;
import java_cup.runtime.Symbol;
import json.JsonResult;
import Reporter.Reporter;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/2/18 11:48 PM from the specification file
 * <tt>src/cp/cp_lexical.jflex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int READ_STRING = 2;
  public static final int FINISH_READING_CHAR = 6;
  public static final int YYINITIAL = 0;
  public static final int READ_CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  7,  0,  5,  7,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     5, 37, 42,  0,  0, 41, 39, 44, 32, 33, 40, 38, 34, 11,  2,  9, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 35,  8, 36, 10,  0, 
     0, 18, 24, 17, 19, 12, 31,  4,  4, 20,  4,  4, 22, 21, 13, 16, 
    30,  4, 15, 25, 14, 26, 27,  4, 23,  4,  4, 28, 43, 29,  0,  4, 
     0, 18, 24, 17, 19, 12, 31,  4,  4, 20,  4,  4, 22, 21, 13, 16, 
    30,  4, 15, 25, 14, 26, 27,  4, 23,  4,  4,  0,  6,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\10\3\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\1\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\0\1\32\1\0\1\33"+
    "\1\34\1\35\1\36\11\3\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\0\1\35\13\3"+
    "\1\50\7\3\1\51\4\3\1\52\1\53\1\54\4\3"+
    "\1\0\1\3\1\55\1\3\4\0\1\56\1\57\22\0"+
    "\1\60\2\0\1\61\5\0\1\62\17\0\1\63\11\0"+
    "\1\64\30\0\1\65\16\0\1\66\14\0\1\67\3\0"+
    "\1\70\11\0\1\71\1\72\2\0\1\73\7\0\1\74"+
    "\3\0\1\75\5\0\1\76\1\0\1\77\4\0\1\100"+
    "\1\0\1\101\1\102\1\0\1\103\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\264"+
    "\0\u013b\0\u0168\0\264\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249"+
    "\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\264\0\264\0\264"+
    "\0\264\0\u0357\0\u0384\0\u03b1\0\u03de\0\264\0\264\0\264"+
    "\0\264\0\u040b\0\264\0\u0438\0\264\0\264\0\264\0\u0465"+
    "\0\264\0\u0492\0\264\0\264\0\u04bf\0\264\0\u04ec\0\u0519"+
    "\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\264"+
    "\0\264\0\264\0\264\0\264\0\264\0\264\0\264\0\u0465"+
    "\0\u0681\0\264\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f"+
    "\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u010e\0\u089d\0\u08ca"+
    "\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u010e\0\u09d8\0\u0a05"+
    "\0\u0a32\0\u0a5f\0\u010e\0\u010e\0\u010e\0\u0a8c\0\u0ab9\0\u0ae6"+
    "\0\u0b13\0\u0b40\0\u0b6d\0\u010e\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21"+
    "\0\u0c4e\0\u010e\0\u010e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f"+
    "\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97"+
    "\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\264\0\u0fa5\0\u0fd2"+
    "\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a"+
    "\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2"+
    "\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a"+
    "\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572"+
    "\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da"+
    "\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842"+
    "\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa"+
    "\0\u19d7\0\264\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5"+
    "\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d"+
    "\0\264\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88"+
    "\0\u1db5\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\264\0\u1e96\0\u1ec3"+
    "\0\u1ef0\0\264\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe"+
    "\0\u202b\0\u2058\0\u2085\0\264\0\264\0\u20b2\0\u20df\0\264"+
    "\0\u210c\0\u2139\0\u2166\0\u2193\0\u21c0\0\u21ed\0\u221a\0\264"+
    "\0\u2247\0\u2274\0\u22a1\0\264\0\u22ce\0\u22fb\0\u2328\0\u2355"+
    "\0\u2382\0\264\0\u23af\0\264\0\u23dc\0\u2409\0\u2436\0\u2463"+
    "\0\264\0\u2490\0\264\0\264\0\u24bd\0\264\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\5\2\7\1\10\1\11\1\10\1\12"+
    "\1\13\1\14\1\15\1\16\1\7\1\17\1\20\1\7"+
    "\1\21\1\7\1\22\4\7\1\23\3\7\2\5\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\5\1\41\7\42\1\5"+
    "\42\42\1\43\1\44\1\42\55\45\54\46\1\47\56\0"+
    "\1\6\1\50\53\0\1\7\2\0\1\7\7\0\20\7"+
    "\2\0\2\7\23\0\1\51\57\0\1\52\32\0\1\53"+
    "\54\0\1\54\22\0\1\55\1\56\42\0\1\7\2\0"+
    "\1\7\7\0\1\7\1\57\16\7\2\0\2\7\16\0"+
    "\1\7\2\0\1\7\7\0\1\60\2\7\1\61\14\7"+
    "\2\0\2\7\16\0\1\7\2\0\1\7\7\0\1\62"+
    "\17\7\2\0\2\7\16\0\1\7\2\0\1\7\7\0"+
    "\6\7\1\63\11\7\2\0\2\7\16\0\1\7\2\0"+
    "\1\7\7\0\1\64\17\7\2\0\2\7\16\0\1\7"+
    "\2\0\1\7\7\0\4\7\1\65\13\7\2\0\2\7"+
    "\16\0\1\7\2\0\1\7\7\0\3\7\1\66\14\7"+
    "\2\0\2\7\16\0\1\7\2\0\1\7\7\0\6\7"+
    "\1\67\11\7\2\0\2\7\61\0\1\70\54\0\1\71"+
    "\56\0\1\72\55\0\1\73\5\0\7\42\1\0\42\42"+
    "\2\0\1\42\15\0\1\74\1\75\1\76\32\0\1\77"+
    "\3\0\1\100\53\0\11\52\1\101\43\52\7\55\1\102"+
    "\45\55\1\0\1\7\2\0\1\7\7\0\2\7\1\103"+
    "\15\7\2\0\2\7\16\0\1\7\2\0\1\7\7\0"+
    "\13\7\1\104\4\7\2\0\2\7\16\0\1\7\2\0"+
    "\1\7\7\0\16\7\1\105\1\7\2\0\2\7\16\0"+
    "\1\7\2\0\1\7\7\0\15\7\1\106\2\7\2\0"+
    "\2\7\16\0\1\7\2\0\1\7\7\0\3\7\1\107"+
    "\14\7\2\0\2\7\16\0\1\7\2\0\1\7\7\0"+
    "\5\7\1\110\12\7\2\0\2\7\16\0\1\7\2\0"+
    "\1\7\7\0\4\7\1\111\13\7\2\0\2\7\16\0"+
    "\1\7\2\0\1\7\7\0\10\7\1\112\7\7\2\0"+
    "\2\7\16\0\1\7\2\0\1\7\7\0\12\7\1\113"+
    "\5\7\2\0\2\7\15\0\11\52\1\101\1\102\42\52"+
    "\1\0\1\7\2\0\1\7\7\0\1\114\17\7\2\0"+
    "\2\7\16\0\1\7\2\0\1\7\7\0\2\7\1\115"+
    "\15\7\2\0\2\7\16\0\1\7\2\0\1\7\7\0"+
    "\1\116\17\7\2\0\2\7\16\0\1\7\2\0\1\7"+
    "\7\0\16\7\1\117\1\7\2\0\2\7\16\0\1\7"+
    "\2\0\1\7\7\0\6\7\1\120\11\7\2\0\2\7"+
    "\16\0\1\7\2\0\1\7\7\0\10\7\1\121\7\7"+
    "\2\0\2\7\16\0\1\7\2\0\1\7\7\0\12\7"+
    "\1\122\5\7\2\0\2\7\16\0\1\7\2\0\1\7"+
    "\7\0\1\7\1\123\16\7\2\0\2\7\16\0\1\7"+
    "\2\0\1\7\7\0\15\7\1\124\2\7\2\0\2\7"+
    "\16\0\1\7\2\0\1\7\7\0\3\7\1\125\14\7"+
    "\2\0\2\7\16\0\1\7\2\0\1\7\7\0\4\7"+
    "\1\126\13\7\2\0\2\7\16\0\1\7\2\0\1\7"+
    "\7\0\12\7\1\127\5\7\2\0\2\7\16\0\1\7"+
    "\2\0\1\7\7\0\5\7\1\130\12\7\2\0\2\7"+
    "\16\0\1\7\2\0\1\7\7\0\11\7\1\131\6\7"+
    "\2\0\2\7\16\0\1\7\2\0\1\7\7\0\1\132"+
    "\17\7\2\0\2\7\16\0\1\7\2\0\1\7\7\0"+
    "\2\7\1\133\15\7\2\0\2\7\16\0\1\7\2\0"+
    "\1\7\7\0\1\134\17\7\2\0\2\7\16\0\1\7"+
    "\2\0\1\7\7\0\4\7\1\135\13\7\2\0\2\7"+
    "\16\0\1\7\2\0\1\7\7\0\2\7\1\136\15\7"+
    "\2\0\2\7\16\0\1\7\2\0\1\7\7\0\2\7"+
    "\1\137\15\7\2\0\2\7\16\0\1\7\2\0\1\7"+
    "\7\0\6\7\1\140\11\7\2\0\2\7\16\0\1\7"+
    "\2\0\1\7\7\0\6\7\1\141\11\7\2\0\2\7"+
    "\16\0\1\7\1\142\1\0\1\7\7\0\20\7\2\0"+
    "\2\7\16\0\1\7\2\0\1\7\7\0\1\143\17\7"+
    "\2\0\2\7\16\0\1\7\2\0\1\7\7\0\12\7"+
    "\1\144\5\7\2\0\2\7\16\0\1\7\2\0\1\7"+
    "\7\0\1\7\1\145\16\7\2\0\2\7\36\0\1\146"+
    "\3\0\1\147\3\0\1\150\1\0\1\151\22\0\1\7"+
    "\2\0\1\7\7\0\3\7\1\152\14\7\2\0\2\7"+
    "\16\0\1\7\2\0\1\7\7\0\4\7\1\153\13\7"+
    "\2\0\2\7\35\0\1\154\5\0\1\155\42\0\1\156"+
    "\61\0\1\157\55\0\1\160\57\0\1\161\51\0\1\162"+
    "\50\0\1\163\56\0\1\164\53\0\1\165\51\0\1\166"+
    "\71\0\1\167\43\0\1\170\53\0\1\171\61\0\1\172"+
    "\45\0\1\173\53\0\1\174\63\0\1\175\45\0\1\176"+
    "\62\0\1\177\50\0\1\200\67\0\1\201\43\0\1\202"+
    "\64\0\1\203\46\0\1\204\34\0\1\205\31\0\1\206"+
    "\51\0\1\207\51\0\1\210\45\0\1\211\52\0\1\212"+
    "\3\0\1\213\34\0\1\214\55\0\1\215\31\0\1\216"+
    "\34\0\1\217\64\0\1\220\50\0\1\221\56\0\1\222"+
    "\33\0\1\214\33\0\1\223\34\0\1\224\3\0\1\225"+
    "\34\0\1\226\104\0\1\227\43\0\1\230\61\0\1\231"+
    "\44\0\1\232\41\0\1\233\72\0\1\234\56\0\1\235"+
    "\33\0\1\226\33\0\1\236\21\0\1\237\31\0\1\240"+
    "\51\0\1\241\53\0\1\242\42\0\1\243\53\0\1\244"+
    "\64\0\1\245\44\0\1\246\41\0\1\247\67\0\1\250"+
    "\3\0\1\251\34\0\1\252\55\0\1\253\31\0\1\254"+
    "\37\0\1\255\61\0\1\256\50\0\1\257\64\0\1\260"+
    "\42\0\1\261\53\0\1\262\1\263\17\0\1\264\36\0"+
    "\1\265\56\0\1\266\33\0\1\252\33\0\1\267\40\0"+
    "\1\270\34\0\1\271\67\0\1\272\63\0\1\273\56\0"+
    "\1\274\46\0\1\275\61\0\1\276\50\0\1\277\60\0"+
    "\1\300\52\0\1\301\57\0\1\302\44\0\1\303\41\0"+
    "\1\304\74\0\1\305\33\0\1\271\33\0\1\306\41\0"+
    "\1\307\62\0\1\310\40\0\1\311\63\0\1\312\56\0"+
    "\1\313\65\0\1\314\35\0\1\315\65\0\1\316\42\0"+
    "\1\317\53\0\1\320\1\321\2\0\1\322\15\0\1\323"+
    "\32\0\1\324\41\0\1\325\75\0\1\326\50\0\1\327"+
    "\57\0\1\330\62\0\1\331\44\0\1\332\56\0\1\333"+
    "\51\0\1\334\61\0\1\335\50\0\1\336\60\0\1\337"+
    "\56\0\1\340\60\0\1\341\40\0\1\342\54\0\1\343"+
    "\52\0\1\344\63\0\1\345\50\0\1\346\62\0\1\347"+
    "\43\0\1\350\63\0\1\351\56\0\1\352\65\0\1\353"+
    "\40\0\1\354\47\0\1\355\63\0\1\356\44\0\1\357"+
    "\54\0\1\360\54\0\1\361\62\0\1\362\62\0\1\363"+
    "\44\0\1\364\65\0\1\365\44\0\1\366\56\0\1\367"+
    "\60\0\1\370\43\0\1\371\61\0\1\372\50\0\1\373"+
    "\51\0\1\374\64\0\1\375\52\0\1\376\50\0\1\377"+
    "\55\0\1\u0100\51\0\1\u0101\60\0\1\u0102\57\0\1\u0103"+
    "\51\0\1\u0104\54\0\1\u0105\51\0\1\u0106\70\0\1\u0107"+
    "\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9450];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\1\11\2\1\1\11\12\1\4\11"+
    "\4\1\4\11\1\1\1\11\1\1\3\11\1\0\1\11"+
    "\1\0\2\11\1\1\1\11\11\1\10\11\1\1\1\0"+
    "\1\11\37\1\1\0\3\1\4\0\2\1\22\0\1\11"+
    "\2\0\1\1\5\0\1\1\17\0\1\1\11\0\1\1"+
    "\30\0\1\11\16\0\1\11\14\0\1\11\3\0\1\11"+
    "\11\0\2\11\2\0\1\11\7\0\1\11\3\0\1\11"+
    "\5\0\1\11\1\0\1\11\4\0\1\11\1\0\2\11"+
    "\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    JsonResult result = new JsonResult();
    
    int curr_line = 0;
    int curr_col = 0;

    public void setCurrLine(int curr_line){
        this.curr_line = curr_line;
    }

    public void setCurrCol(int curr_col){
        this.curr_col = curr_col;
    }

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn, yytext());
    }

    private Symbol symbol(int type, Object value, boolean goBack) {
        return new Symbol(type, curr_line + yyline, curr_col + yycolumn + (goBack ? 1 : 0), value);
    }

    private Symbol symbol(int type, Object value) {
        return symbol(type, value, false);
    }

    public void setJsonObject(JsonResult result){
        this.result = result;
    }

    private int getNumOfIndex(String indexable){
        int start = indexable.indexOf("[") + 1;
        int end = indexable.indexOf("]");
        
        if (start > -1 && start < end){
            String number = indexable.substring(start, end);
            return Integer.parseInt(number);
        }
        return -1;
    }
    
    private void createError(){
        String err = "Caracter inesperado < %s >";
        Reporter.addLexicError(String.format(err, yytext()), yyline + 1, yycolumn);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 46: 
          { return symbol(sym.CARACTER, yytext());
          }
        case 69: break;
        case 59: 
          { try {
        String value = result.getVarNames();
        return symbol(sym.STRING_LITERAL, value);
    } catch (Exception e){
        Reporter.log(e.getMessage());
        return symbol(sym.STRING_LITERAL, "");
    }
          }
        case 70: break;
        case 45: 
          { return symbol(sym.DECIMAL, yytext());
          }
        case 71: break;
        case 44: 
          { return symbol(sym.ENTERO, yytext());
          }
        case 72: break;
        case 67: 
          { try {
        int index = getNumOfIndex(yytext()); 
        String value = result.getVarFunc(index);
        return symbol(sym.STRING_LITERAL, value);
    } catch (Exception e){
        Reporter.log(e.getMessage());
        return symbol(sym.STRING_LITERAL, "");
    }
          }
        case 73: break;
        case 36: 
          { string.append('\t');
          }
        case 74: break;
        case 9: 
          { return symbol(sym.OPEN_PARENTHESIS);
          }
        case 75: break;
        case 60: 
          { try {
        int index = getNumOfIndex(yytext());
        String value = result.getMethodName(index);
        return symbol(sym.STRING_LITERAL, value);
    } catch (Exception e){
        Reporter.log(e.getMessage());
        return symbol(sym.STRING_LITERAL, "");
    }
          }
        case 76: break;
        case 43: 
          { return symbol(sym.BFALSE, yytext());
          }
        case 77: break;
        case 65: 
          { int value = result.getComentsSize();
    return symbol(sym.EXPNUMBER, String.valueOf(value));
          }
        case 78: break;
        case 7: 
          { return symbol(sym.GREATER_THAN);
          }
        case 79: break;
        case 30: 
          { return symbol(sym.MINUSMINUS);
          }
        case 80: break;
        case 22: 
          { string.append('\\');
          }
        case 81: break;
        case 47: 
          { return symbol(sym.BOOLEANO, yytext());
          }
        case 82: break;
        case 32: 
          { return symbol(sym.NOT_EQUAL);
          }
        case 83: break;
        case 37: 
          { string.append('\r');
          }
        case 84: break;
        case 24: 
          { createError();
          }
        case 85: break;
        case 61: 
          { try {
        int index = getNumOfIndex(yytext()); 
        String value = result.getVarType(index);
        return symbol(sym.STRING_LITERAL, value);
    } catch (Exception e){
        Reporter.log(e.getMessage());
        return symbol(sym.STRING_LITERAL, "");
    }
          }
        case 86: break;
        case 55: 
          { int value = result.getClassesSize();
    return symbol(sym.EXPNUMBER, String.valueOf(value));
          }
        case 87: break;
        case 27: 
          { return symbol(sym.LESSEQUAL_THAN);
          }
        case 88: break;
        case 2: 
          { return symbol(sym.EXPNUMBER);
          }
        case 89: break;
        case 64: 
          { try {
        int index = getNumOfIndex(yytext()); 
        String value = result.getVarName(index);
        return symbol(sym.STRING_LITERAL, value);
    } catch(Exception e){
        Reporter.log(e.getMessage());
        return symbol(sym.STRING_LITERAL, "");
    }
          }
        case 90: break;
        case 4: 
          { ;
          }
        case 91: break;
        case 16: 
          { return symbol(sym.AR_MUL);
          }
        case 92: break;
        case 53: 
          { String value = result.getClassNames();
    return symbol(sym.STRING_LITERAL, value);
          }
        case 93: break;
        case 39: 
          { return symbol(sym.EXPDECIMAL);
          }
        case 94: break;
        case 56: 
          { try {
        int index = getNumOfIndex(yytext());
        String value = result.getMethodType(index);
        return symbol(sym.STRING_LITERAL, value);
    } catch (Exception e){
        Reporter.log(e.getMessage());
        return symbol(sym.STRING_LITERAL, "");
    }
          }
        case 95: break;
        case 50: 
          { String value = result.getMethods();
    return symbol(sym.STRING_LITERAL, value);
          }
        case 96: break;
        case 63: 
          { try {
        int index = getNumOfIndex(yytext()); 
        String value = result.getVarClass(index);
        return symbol(sym.STRING_LITERAL, value);
    } catch (Exception e){
        Reporter.log(e.getMessage());
        return symbol(sym.STRING_LITERAL, "");
    }
          }
        case 97: break;
        case 38: 
          { string.append('\"');
          }
        case 98: break;
        case 34: 
          { return symbol(sym.ANDBOP);
          }
        case 99: break;
        case 41: 
          { return symbol(sym.TEXTO, yytext());
          }
        case 100: break;
        case 13: 
          { return symbol(sym.EQUAL);
          }
        case 101: break;
        case 26: 
          { return symbol(sym.ORBOP);
          }
        case 102: break;
        case 21: 
          { yybegin(YYINITIAL); 
        return symbol(sym.STRING_LITERAL, string.toString());
          }
        case 103: break;
        case 10: 
          { return symbol(sym.CLOSING_PARENTHESIS);
          }
        case 104: break;
        case 15: 
          { return symbol(sym.AR_SUM);
          }
        case 105: break;
        case 28: 
          { return symbol(sym.GREATEQUAL_THAN);
          }
        case 106: break;
        case 12: 
          { return symbol(sym.SEMICOLON);
          }
        case 107: break;
        case 52: 
          { String value = result.getComents();
    return symbol(sym.STRING_LITERAL, value);
          }
        case 108: break;
        case 35: 
          { string.append('\n');
          }
        case 109: break;
        case 33: 
          { return symbol(sym.PLUSPLUS);
          }
        case 110: break;
        case 57: 
          { try {
        int index = getNumOfIndex(yytext());
        String value = result.getClassName(index);
        return symbol(sym.STRING_LITERAL, value);
    } catch (Exception e) {
        Reporter.log(e.getMessage());
        return symbol(sym.STRING_LITERAL, "");
    }
          }
        case 111: break;
        case 49: 
          { String value = result.getClasses();
    return symbol(sym.STRING_LITERAL, value);
          }
        case 112: break;
        case 62: 
          { int value = result.getVarSize();
    return symbol(sym.EXPNUMBER, String.valueOf(value));
          }
        case 113: break;
        case 58: 
          { int value = result.getMethodSize();
    return symbol(sym.EXPNUMBER, String.valueOf(value));
          }
        case 114: break;
        case 48: 
          { double score = result.getScore();
    return symbol(sym.EXPDECIMAL, String.valueOf(score));
          }
        case 115: break;
        case 3: 
          { return symbol(sym.EXPID);
          }
        case 116: break;
        case 6: 
          { return symbol(sym.AR_DIV);
          }
        case 117: break;
        case 18: 
          { string.setLength(0); 
    yybegin(READ_STRING);
          }
        case 118: break;
        case 25: 
          { yybegin(YYINITIAL);
        return symbol(sym.CHAR_LITERAL, string.toString());
          }
        case 119: break;
        case 66: 
          { try {
        int index = getNumOfIndex(yytext());
        String value = result.getComent(index);
        return symbol(sym.STRING_LITERAL, value);
    } catch (Exception e){
        Reporter.log(e.getMessage());
        return symbol(sym.STRING_LITERAL, "");
    }
          }
        case 120: break;
        case 31: 
          { return symbol(sym.BEQUAL);
          }
        case 121: break;
        case 14: 
          { return symbol(sym.NOTBOP);
          }
        case 122: break;
        case 40: 
          { return symbol(sym.BTRUE, yytext());
          }
        case 123: break;
        case 42: 
          { return symbol(sym.PRINT, yytext());
          }
        case 124: break;
        case 17: 
          { return symbol(sym.AR_MOD);
          }
        case 125: break;
        case 54: 
          { String value = result.getMethodNames();
    return symbol(sym.STRING_LITERAL, value);
          }
        case 126: break;
        case 8: 
          { return symbol(sym.AR_SUB);
          }
        case 127: break;
        case 23: 
          { yybegin(FINISH_READING_CHAR);
        string.append(yytext());
          }
        case 128: break;
        case 68: 
          { try {
        int index = getNumOfIndex(yytext());
        int value = result.getMethodParams(index);
        return symbol(sym.EXPNUMBER, String.valueOf(value));
    } catch (Exception e){
        Reporter.log(e.getMessage());
        return symbol(sym.EXPNUMBER, "-1");
    }
          }
        case 129: break;
        case 11: 
          { return symbol(sym.COMMA);
          }
        case 130: break;
        case 1: 
          { String err = "Caracter inesperado < %s >";
    Reporter.addLexicError(String.format(err), yyline + 1, yycolumn);
          }
        case 131: break;
        case 5: 
          { return symbol(sym.LESS_THAN);
          }
        case 132: break;
        case 51: 
          { try {
        String value = result.getVars();
        return symbol(sym.STRING_LITERAL, value);
    } catch (Exception e){
        Reporter.log(e.getMessage());
        return symbol(sym.STRING_LITERAL, "");
    }
          }
        case 133: break;
        case 29: 
          { System.out.println(yytext());
          }
        case 134: break;
        case 19: 
          { string.setLength(0);
    yybegin(READ_CHAR);
          }
        case 135: break;
        case 20: 
          { string.append( yytext() );
          }
        case 136: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
