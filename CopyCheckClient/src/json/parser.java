
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package json;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\005\000\002\005\003\000\002" +
    "\005\004\000\002\005\004\000\002\006\005\000\002\007" +
    "\003\000\002\007\003\000\002\015\002\000\002\010\006" +
    "\000\002\011\003\000\002\011\003\000\002\016\002\000" +
    "\002\012\006\000\002\013\005\000\002\013\003\000\002" +
    "\013\004\000\002\013\004\000\002\014\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\006\004\010\006\004\001\002\000\022\003" +
    "\042\004\010\006\004\007\uffe6\012\032\013\033\014\031" +
    "\015\036\001\002\000\004\002\ufffe\001\002\000\004\002" +
    "\000\001\002\000\004\002\uffff\001\002\000\010\003\ufff0" +
    "\005\ufff0\013\ufff0\001\002\000\004\002\012\001\002\000" +
    "\004\002\001\001\002\000\010\003\017\005\uffe6\013\015" +
    "\001\002\000\004\005\037\001\002\000\004\011\uffec\001" +
    "\002\000\004\005\uffed\001\002\000\006\005\025\010\024" +
    "\001\002\000\006\005\uffe9\010\uffe9\001\002\000\006\005" +
    "\uffee\010\022\001\002\000\004\013\015\001\002\000\006" +
    "\005\uffea\010\uffea\001\002\000\006\005\uffe8\010\uffe8\001" +
    "\002\000\006\005\uffe7\010\uffe7\001\002\000\004\011\027" +
    "\001\002\000\016\004\010\006\004\012\032\013\033\014" +
    "\031\015\036\001\002\000\006\005\uffeb\010\uffeb\001\002" +
    "\000\010\005\ufffa\007\ufffa\010\ufffa\001\002\000\010\005" +
    "\ufff8\007\ufff8\010\ufff8\001\002\000\010\005\ufffd\007\ufffd" +
    "\010\ufffd\001\002\000\010\005\ufffc\007\ufffc\010\ufffc\001" +
    "\002\000\010\005\ufffb\007\ufffb\010\ufffb\001\002\000\010" +
    "\005\ufff9\007\ufff9\010\ufff9\001\002\000\012\002\uffef\005" +
    "\uffef\007\uffef\010\uffef\001\002\000\006\007\ufff6\010\ufff6" +
    "\001\002\000\006\007\ufff2\010\050\001\002\000\020\004" +
    "\010\006\004\007\047\012\032\013\033\014\031\015\036" +
    "\001\002\000\004\007\ufff1\001\002\000\004\007\045\001" +
    "\002\000\012\002\ufff3\005\ufff3\007\ufff3\010\ufff3\001\002" +
    "\000\006\007\ufff4\010\ufff4\001\002\000\006\007\ufff5\010" +
    "\ufff5\001\002\000\016\004\010\006\004\012\032\013\033" +
    "\014\031\015\036\001\002\000\006\007\ufff7\010\ufff7\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\047\000\012\002\010\003\005\006\006\010\004\001" +
    "\001\000\016\004\037\005\040\006\034\007\043\010\033" +
    "\014\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\013\012\017\013\020\014" +
    "\015\001\001\000\002\001\001\000\004\016\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\027\006\034\010\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\045\006\034\010\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\050\006\034\010\033\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


     
    public void syntax_error(Symbol s){
        System.out.println("Syntax error: < " + s.value + " > Line " + (s.left+1) + " Col " + ( s.right + 1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Fatal Syntax Error: < "+ s.value + " > Linea " + (s.left+1) + " Col " + (s.right + 1) );
    }

    private JsonVisualizer view;

    public void setJsonVisualizer(JsonVisualizer view){
        this.view = view;
    }

    boolean hasName = false;
    boolean isClosable = true;
    String currentName = "";


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //contador variables

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial_state EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial_state ::= json_document 
            {
              String RESULT =null;
		int jdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String jd = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println(jd);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("initial_state",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // json_document ::= json_array 
            {
              String RESULT =null;
		int jaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ja = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ja;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_document",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // json_document ::= json_object 
            {
              String RESULT =null;
		int joleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int joright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String jo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = jo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_document",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // json_value ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = id;
    if(hasName) {
        currentName = id;
        hasName = false;
    }
    else {
        view.addChild(id);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_value",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // json_value ::= json_object 
            {
              String RESULT =null;
		int joleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int joright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String jo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = jo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_value",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // json_value ::= json_array 
            {
              String RESULT =null;
		int jaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ja = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ja;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_value",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // json_value ::= BOOL 
            {
              String RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bool = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    view.addChild(bool);
    RESULT = bool;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_value",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // json_value ::= NULL_VALUE 
            {
              String RESULT =null;
		
    view.addChild("null");
    RESULT = "null";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_value",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // json_value ::= EXPNUMBER 
            {
              String RESULT =null;
		int numbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String numb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    view.addChild(numb);
    RESULT = numb;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_value",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // json_value_list ::= json_value_list COMMA json_value 
            {
              String RESULT =null;
		int jvlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int jvlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String jvl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int jvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String jv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = jvl + ", " + jv;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_value_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // json_value_list ::= json_value 
            {
              String RESULT =null;
		int jvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String jv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = jv;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_value_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // json_value_list ::= error CLOSING_SQR_BRACES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_value_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // json_value_list ::= error json_value 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_value_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // json_array ::= OPEN_SQR_BRACES json_array_data CLOSING_SQR_BRACES 
            {
              String RESULT =null;
		int jadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String jad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = "[" + jad + "]";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_array",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // json_array_data ::= json_value_list 
            {
              String RESULT =null;
		int jvlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jvlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String jvl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = jvl;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_array_data",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // json_array_data ::= epsilum 
            {
              String RESULT =null;
		
    RESULT = "";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_array_data",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              String RESULT =null;

    view.addNode("Value"); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // json_object ::= OPEN_BRACES NT$0 json_object_body CLOSING_BRACES 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int jobleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int jobright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String job = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if (currentName != "") {
        view.changeCurrentNodeName(currentName);
        currentName = "";
    }
    view.closeNode(true);
    RESULT = "{\n"  + job + "\n}";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_object",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // json_object_body ::= json_property_list 
            {
              String RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = pl;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_object_body",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // json_object_body ::= epsilum 
            {
              String RESULT =null;
		
    RESULT = "";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_object_body",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

    if (id.toLowerCase().equals("nombre") || id.toLowerCase().equals("texto")){
        hasName = true;
        isClosable = false;
    } else {
        isClosable = true;
        view.addNode(id);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // json_property ::= ID NT$1 DOUBLEPOINT json_value 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int jvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String jv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (isClosable) {
        view.closeNode(false);
    } 
    isClosable = true;
    hasName = false;
    RESULT = id + " : " + jv;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_property",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // json_property_list ::= json_property_list COMMA json_property 
            {
              String RESULT =null;
		int jplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int jplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String jpl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int jpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String jp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = jpl + "\n" + jp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_property_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // json_property_list ::= json_property 
            {
              String RESULT =null;
		int jpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String jp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = jp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_property_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // json_property_list ::= error COMMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_property_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // json_property_list ::= error CLOSING_BRACES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("json_property_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // epsilum ::= 
            {
              Symbol RESULT =null;
		
    RESULT = new Symbol(0);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilum",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
